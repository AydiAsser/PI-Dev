{% extends 'base.html.twig' %}

{% block title %}Article index
{% endblock %}
{% block stylesheets %}
	<link rel="stylesheet" href="{{asset("front/css/style2.css")}}">
	<link rel="stylesheet" href="{{asset("front/css/bootstrap2.min.css")}}">
	<link rel="stylesheet" href="{{asset("front/css/comment.css")}}">

	<link rel="preconnect" href="https://fonts.googleapis.com">
	<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
	<link
	href="https://fonts.googleapis.com/css2?family=Jost:wght@500;600&family=Roboto&display=swap" rel="stylesheet">

	<!-- Icon Font Stylesheet -->
	<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css"/>
	<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css" rel="stylesheet">
	<link href='https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-alpha1/css/bootstrap.min.css' rel='stylesheet'>
	<link href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css' rel='stylesheet'>

	<style>
		.comment-div {
			box-shadow: 0 0 5px rgba(0, 0, 0, 0.1); /* Add a slight shadow */
			transition: box-shadow 0.3s ease;
		}
		.comment-content {
			max-width: 80%;
			word-wrap: break-word;
		}
	</style>
{% endblock %}


{% block body %}

	<!-- Article Details Start -->


	<article style="  padding-left: 100px;
				  padding-right: 100px;" class="blog_item">

		<div class="blog_item_img">

			{% if article.picture is  null %}
				<img style="margin-top:118px;" class="card-img rounded-0" src="{{ asset("/front/img/blog/dna.png") }}" alt="">
			{% else %}
				<img style="margin-top:118px;" class="card-img rounded-0" src="{{ asset('uploads/pictures/' ~ article.picture) }}" alt="">
			{% endif %}
			<a href="#" class="blog_item_date">
				<p>{{ article.createdAt ? article.createdAt|date('Y') : '' }}</p>
				<h3>{{ article.createdAt ? article.createdAt|date('d') : '' }}</h3>
				<p>{{ article.createdAt ? article.createdAt|date('M') : '' }}</p>
			</a>
		</div>

		<div class="blog_details">

			<div style="display:flex;justify-content:space-between;align-items:center;">

				<h3 class="mb-30">{{ article.title }}</h3>
				<a href="{{ path('download_Details', {'id': article.id}) }}" class="btn btn-warning mb-30">
					<i class="ti ti-download" style="color:black;font-size: 1.5em;"></i>
				</a>
			</div>

			<div class="row">
				<div class="col-lg-12">
					<blockquote class="generic-blockquote">
						{{ article.contenu }}
					</blockquote>
				</div>
			</div>
			<ul class="blog-info-link">
				<li>
					<a href="#">
						<i class="fa fa-user"></i>
						{{ article.author ? article.author.firstName ~ ' ' ~ article.author.lastName : 'Unknown' }}</a>
				</li>
				<li>
					<a href="#">
						<i class="fa fa-comments"></i>
						<span value={{ article.nbComments }} id="comment-count">{{ article.nbComments }}
							Comments</span>
					</a>
				</li>
				<li>
					<a href="#" class="like-button" data-article-id="{{ article.id }}">
						<i class="fa fa-heart"></i>
						<span class="like-count">{{ article.nbLikes }}
							Likes
						</span>
					</a>
				</li>
			</ul>
		</div>
	</article>


	<!-- Comment Section Start -->
	<div class="comment-section">
		<body oncontextmenu='return false' class='snippet-body'>
			<div class="container mt-5 mb-5">
				<div class="row height d-flex justify-content-center align-items-center">
					<div class="col-md-7">
						<div class="card">
							<div class="p-3">
								<h6>Comments</h6>
							</div>

							<form id="comment-form" action="{{ path('app_commentaire_new') }}" method="post">

								<div class="mt-3 d-flex flex-row align-items-center p-3 form-color">
									<img src="https://wac-cdn.atlassian.com/fr/dam/jcr:ba03a215-2f45-40f5-8540-b2015223c918/Max-R_Headshot%20(1).jpg?cdnVersion=1450" width="50" class="rounded-circle mr-2">

									<input
									type="hidden" name="article" value="{{ article.id }}">
									{# <div style="display:flex;flex-direction:column;"> #}
									<input
									type="text" name="comment" class="form-control" placeholder="Enter your comment...">
									{# </div> #}

									<button style="margin-left:10px;" type="submit" class="btn btn-primary">Submit</button>
								</div>

								<span class="" type="text" class="form-control" id="comment-error-message"></span>
							</form>


							<script>


								document.addEventListener('DOMContentLoaded', function () {
const commentForm = document.querySelector('#comment-form');

if (commentForm) {
commentForm.addEventListener('submit', function (event) {
event.preventDefault(); // Prevent the default form submission behavior

const formData = new FormData(this);
const commentInput = formData.get('comment');
const commentInputField = document.querySelector('input[name="comment"]');
const errorMessageContainer = document.querySelector('#comment-error-message');


// Check if the comment is blank
if (commentInput.trim() === '') {
errorMessageContainer.classList.add('error-message'); // Add the error-message class
errorMessageContainer.textContent = 'Comment cannot be blank';
return; // Do not proceed if the comment is blank
}


// Send AJAX request to add the comment
fetch(this.action, {
method: 'POST',
body: formData,
headers: {
'X-Requested-With': 'XMLHttpRequest'
}
}).then(response => {
if (response.ok) {
console.log('Comment added successfully');
return response.text();
}
if (response.status == 403) {
errorMessageContainer.classList.add('error-message'); // Add the error-message class
errorMessageContainer.textContent = 'Inappropriate content';

console.error('Failed to add comment');
throw new Error('Failed to add comment');
} else {
console.error('Failed to add comment');
throw new Error('Failed to add comment');
}

}).then(html => {
errorMessageContainer.textContent = ''

const tempDiv = document.createElement('div');

tempDiv.innerHTML = html.trim();
const commentDivs = tempDiv.querySelectorAll('.comment-div');
const lastCommentDiv = commentDivs[commentDivs.length - 1];

if (lastCommentDiv) {
const commentsContainer = document.querySelector('#comments-container');
const commentCount = document.querySelector('#comment-count');
const nbComments = tempDiv.querySelector('#comment-count');

commentCount.innerHTML = nbComments.innerHTML;
commentsContainer.appendChild(lastCommentDiv);

const commentInput = document.querySelector('input[name="comment"]');
commentInput.value = '';
} else {
console.error('No comment divs found');
}
}).catch(error => {
console.error('Error adding comment:', error);
});
});
} else {
console.error('Comment form not found');
}

function displayErrorMessage(message) {
errorMessageContainer.classList.add('error-message');
errorMessageContainer.textContent = message;
}

function clearErrorMessage() {
errorMessageContainer.textContent = '';
}
});
							</script>


							<div id="comments-container" style="padding:10px;" class="mt-2">

								{% for commentaire in article.commentaires %}
									<div class="d-flex flex-row p-3 comment comment-div" data-comment-id="{{ commentaire.id }}">
										<img src="https://images.unsplash.com/photo-1527980965255-d3b416303d12?q=80&w=1480&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D" width="50" height="50" class="rounded-circle mr-2">
										<div class="w-100">
											<div class="d-flex justify-content-between align-items-center">
												<div class="d-flex flex-row align-items-center">
													<span class="mr-2">{{ commentaire.commenter ? commentaire.commenter.firstName : 'Default' }}
														{{ commentaire.commenter ? commentaire.commenter.lastName : 'User' }}</span>
													{# <small class="c-badge">Owner</small> #}
												</div>
												<small>{{ commentaire.createdAt ? commentaire.createdAt|date('Y-m-d') : '' }}</small>
											</div>

											{# <p class="text-justify comment-text mb-0 position-relative" style="display: flex; justify-content: space-between; align-items: center;"> #}

											<div style="display: flex; justify-content: space-between; align-items: center;">
												<p class="comment-content text-justify comment-text mb-0">{{ commentaire.contenu }}</p>

												{# <span class="comment-content">{{ commentaire.contenu }}</span> #}
						{% if user.id == commentaire.commenter.id %}

												<span style="display: flex; align-items: center;margin-left:0px;">
													<a style="cursor: pointer; margin-right: 10px;" class="edit-comment-btn">
														<i class="ti ti-pencil" style="font-size: 1.5em;"></i>
													</a>
													<a style="cursor: pointer;" class="delete-comment-btn" data-comment-id="{{ commentaire.id }}">
														<form method="post" onsubmit="return confirm('Are you sure you want to delete this item?');" style="margin-bottom: 0;">
															<input type="hidden" name="_token" value="{{ csrf_token('delete' ~ commentaire.id) }}">
															<button class="btn" style="padding: 0;">
																<i class="ti ti-trash" style="font-size: 1.5em;"></i>
															</button>
														</form>
													</a>
												</span>
						{% endif %}

											</div>

											{# </p> #}

						{% if user.id == commentaire.commenter.id %}

											<div class="edit-comment-form d-none">
												<form class="comment-edit-form" action="{{ path('app_commentaire_edit', {'id': commentaire.id}) }}" method="post">
													<div class="d-flex">
														<input type="hidden" name="article" value="{{ article.id }}">
														<input type="text" name="contenu" value="{{ commentaire.contenu }}" class="form-control mr-2">
														<button type="submit" class="btn btn-primary">Save</button>
													</div>
												</form>
											</div>

						{% endif %}
										</div>
									</div>
								{% endfor %}


								<script>


									document.addEventListener('DOMContentLoaded', function () {
const deleteButtons = document.querySelectorAll('.delete-comment-btn');

deleteButtons.forEach(button => {
button.addEventListener('click', function (event) {
event.preventDefault(); // Prevent the default form submission behavior

const commentId = this.dataset.commentId;

// Send AJAX request to delete the comment
fetch('/commentaire/' + commentId, {
method: 'POST',
body: new FormData(),
headers: {
'X-Requested-With': 'XMLHttpRequest' // Add X-Requested-With header for Symfony to detect AJAX request
}
}).then(response => {
if (response.ok) {
console.log('Comment deleted successfully');
console.log(response);
// Remove the comment element from the DOM
const commentElement = document.querySelector('.comment[data-comment-id="' + commentId + '"]');
if (commentElement) {
commentElement.remove();
} else {
console.error('Comment element not found in the DOM');
}
} else {
console.error('Failed to delete comment:', response.statusText);
}
}).then(html => {

const commentCount = document.querySelector('#comment-count');
console.log(commentCount.innerHTML);

// Define a regular expression pattern to match the number
const pattern = /\d+/;

// Use the match() method to find the number in the string
const matches = commentCount.innerHTML.match(pattern);

// Check if any matches were found
if (matches && matches.length > 0) { // Extract the first match (the number) and convert it to an integer
const numberOfComments = parseInt(matches[0]);

commentCount.innerHTML = numberOfComments - 1 + " Comments";
console.log(numberOfComments); // Output: 1 (as an integer)
} else {
console.error('No number found in the string');
}
}).catch(error => {
console.error('Error deleting comment:', error);
});
});
});
});
								</script>


								<script>
									document.addEventListener('DOMContentLoaded', function () {
const editButtons = document.querySelectorAll('.edit-comment-btn');
const deleteButtons = document.querySelectorAll('.delete-comment-btn');

editButtons.forEach(button => {
button.addEventListener('click', function (event) {
event.stopPropagation(); // Prevent event bubbling

const commentDiv = this.closest('.comment');
const commentContent = commentDiv.querySelector('.comment-content');
const editFormDiv = commentDiv.querySelector('.edit-comment-form');

commentContent.classList.add('d-none');
editFormDiv.classList.remove('d-none');

// Add event listener to hide edit form when clicking outside
document.addEventListener('click', function (event) {
if (! editFormDiv.contains(event.target)) {
commentContent.classList.remove('d-none');
editFormDiv.classList.add('d-none');
}
}, {once: true}); // Remove the event listener after one execution
});
});


// Add event listener to handle form submission
document.querySelectorAll('.comment-edit-form').forEach(form => {
form.addEventListener('submit', function (event) {
event.preventDefault(); // Prevent the default form submission behavior

const formData = new FormData(this);

// Send AJAX request to update the comment
fetch(this.action, {
method: 'POST',
body: formData
}).then(response => {
if (response.ok) {
console.log('Comment updated successfully');
window.location.href = window.location.href; // Redirect to the same page after successful update
} else {
console.error('Failed to update comment:', response.statusText);
}
}).catch(error => {
console.error('Error updating comment:', error);
});
});
});
});
								</script>

								<!-- Input field for editing comment -->
								<div class="d-none" id="comment-edit-form">
									<input type="text" class="form-control" id="comment-edit-input">
									<span type="text" class="form-control" id="comment-error-message"></span>
									<button type="button" class="btn btn-primary mt-2" id="comment-edit-submit">Submit</button>
								</div>

								<style>
									.error-message {
										position: relative;
										left: 13%;
										top: -10px;
										color: red; /* Set the text color to red or any color you prefer */
										margin-top: 5px; /* Add margin to create space between the input field and the error message */
										font-size: 14px; /* Set the font size for the error message */
									}
								</style>
							</div>
						</div>
					</div>
				</div>
			</div>
		</body>


		{# <a href="{{ path('app_article_index') }}" class="btn btn-secondary">Back to List</a> #}
		<a style="margin-left:20px;margin-bottom:20px;" class="genric-btn success radius" href="{{ path('app_article_index') }}">back to list</a>

						{% if user.role == 'medecin' and user.id == article.author.id %}
		<a href="{{ path('app_article_edit', {'id': article.id}) }}" class="btn btn-primary">Edit</a>
		{{ include('article/_delete_form.html.twig') }}

						{% endif  %}


	</div>
	<!-- Comment Section End -->
</div>
<!-- Article Details End -->

{% block javascripts %}
	<script type='text/javascript' src=''></script>
	<script type='text/javascript'></script>

	<script type='text/javascript' src='https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js'></script>
	<script type='text/javascript' src='https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-alpha1/js/bootstrap.min.js'></script>


	{#********************* EDIT COMMENT**************************** #}
	<script>
		document.addEventListener('DOMContentLoaded', function () {
const editableComments = document.querySelectorAll('.editable-comment');
editableComments.forEach(comment => {
comment.addEventListener('click', function () {
const commentId = this.dataset.commentId;
const commentText = this.innerText;
const inputField = document.createElement('input');
inputField.type = 'text';
inputField.value = commentText;
inputField.dataset.commentId = commentId;
inputField.classList.add('form-control');

// Create submit button
const submitButton = document.createElement('button');
submitButton.type = 'button';
submitButton.innerText = 'Submit';
submitButton.classList.add('btn', 'btn-primary', 'mt-2');

// Replace the comment text with the input field and submit button
this.parentNode.replaceChildren(inputField, submitButton);

// Focus the input field
inputField.focus();

// Add event listener to handle editing
submitButton.addEventListener('click', function () { // Hardcoded value for testing
const updatedComment = 'This is a hardcoded comment';
const updatedCommentId = inputField.dataset.commentId;

// Send AJAX request to update the comment
const xhr = new XMLHttpRequest();
xhr.open('POST', '{{ path('app_commentaire_edit', {'id': 'COMMENT_ID'}) }}'.replace('COMMENT_ID', updatedCommentId), true);
xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

xhr.onreadystatechange = function () {
if (xhr.readyState === XMLHttpRequest.DONE) {
if (xhr.status === 200) {
console.log('Comment updated successfully:', xhr.responseText);
// Optionally, update the UI to reflect the updated comment
} else {
console.error('Failed to update comment:', xhr.statusText);
}
}
};

const formData = new FormData();
formData.append('contenu', updatedComment);

xhr.send(formData);
});
});
});
});
	</script>

	<script>

		// ********************** LIKE AND DISLIKE *******************************

document.addEventListener('DOMContentLoaded', function () {
var likeButtons = document.querySelectorAll('.like-button');

likeButtons.forEach(function (button) {
button.addEventListener('click', function (event) {
event.preventDefault();

var articleId = button.getAttribute('data-article-id');

fetch('/article/like/' + articleId, {
method: 'POST',
headers: {
'Content-Type': 'application/json',
'X-Requested-With': 'XMLHttpRequest'
}
}).then(response => {
if (response.ok) {
return response.json();
}
throw new Error('Network response was not ok.');
}).then(data => {
console.log(data)
var likeCountElement = button.querySelector('.like-count');
likeCountElement.textContent = data.likes + " Likes";
}).catch(error => {
console.error('Error:', error);
});
});
});
});

	</script>
{% endblock %}{% endblock %}
